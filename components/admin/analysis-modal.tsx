"use client"

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { Markdown } from "@/components/ui/markdown"
import { 
  Bot, 
  Calendar, 
  Clock, 
  Target, 
  Building2,
  User,
  FileText,
  Copy,
  Download
} from "lucide-react"
import { useState } from "react"

interface AnalysisModalProps {
  isOpen: boolean
  onClose: () => void
  analysisData: {
    goal: {
      id: string
      subject: string
      description: string
      status: string
      department: string
      priority: string
      created_at: string
      target_date: string | null
      owner: { full_name: string } | null
    }
    analysis: {
      id: string
      analysis_type: string
      created_at: string
      analysis_result: string
      tokens_used?: number
      processing_time_ms?: number
      ai_config: { 
        model_name: string
        name: string
      } | null
    }
  } | null
}

export function AnalysisModal({ isOpen, onClose, analysisData }: AnalysisModalProps) {
  const [copied, setCopied] = useState(false)

  if (!analysisData) return null

  const { goal, analysis } = analysisData

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(analysis.analysis_result)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      console.error('Failed to copy text:', error)
    }
  }

  const handleDownload = () => {
    const content = `AI Analysis Report
==================

Goal: ${goal.subject}
Department: ${goal.department}
Status: ${goal.status}
Priority: ${goal.priority}
Analysis Date: ${new Date(analysis.created_at).toLocaleString()}
Analysis Type: ${analysis.analysis_type}
Model Used: ${analysis.ai_config?.model_name || 'Unknown'}

Goal Description:
${goal.description}

AI Analysis:
${analysis.analysis_result}

---
Generated by Goal Management System AI Analysis
`

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `ai-analysis-${goal.subject.replace(/[^a-zA-Z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  const getAnalysisTypeColor = (type: string) => {
    switch (type) {
      case 'risk_assessment': return 'bg-red-100 text-red-800 border-red-200'
      case 'optimization_suggestions': return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'progress_review': return 'bg-green-100 text-green-800 border-green-200'
      case 'task_breakdown': return 'bg-purple-100 text-purple-800 border-purple-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getAnalysisTypeLabel = (type: string) => {
    switch (type) {
      case 'risk_assessment': return 'Risk Assessment'
      case 'optimization_suggestions': return 'Optimization Suggestions'
      case 'progress_review': return 'Progress Review'
      case 'task_breakdown': return 'Task Breakdown'
      default: return 'Custom Analysis'
    }
  }


  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <DialogTitle className="flex items-center gap-2">
            <Bot className="w-5 h-5 text-purple-600" />
            AI Analysis Results
          </DialogTitle>
        </DialogHeader>

        <div className="flex-1 overflow-y-auto">
            <div className="space-y-6 pr-4">
              {/* Goal Information */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-3 flex items-center gap-2">
                  <Target className="w-5 h-5 text-blue-600" />
                  Goal Information
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <div className="font-medium text-gray-900 mb-2">{goal.subject}</div>
                    <p className="text-gray-700 text-xs leading-relaxed mb-3">{goal.description}</p>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Building2 className="w-4 h-4 text-gray-500" />
                        <span className="text-gray-600">Department:</span>
                        <Badge variant="outline" className="text-xs">{goal.department}</Badge>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <User className="w-4 h-4 text-gray-500" />
                        <span className="text-gray-600">Owner:</span>
                        <span className="font-medium">{goal.owner?.full_name || 'Unknown'}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="text-gray-600">Status:</span>
                      <Badge variant="secondary" className="text-xs">{goal.status}</Badge>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <span className="text-gray-600">Priority:</span>
                      <Badge variant="outline" className="text-xs">{goal.priority}</Badge>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <Calendar className="w-4 h-4 text-gray-500" />
                      <span className="text-gray-600">Created:</span>
                      <span className="text-xs">{new Date(goal.created_at).toLocaleDateString()}</span>
                    </div>
                    
                    {goal.target_date && (
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4 text-gray-500" />
                        <span className="text-gray-600">Target:</span>
                        <span className="text-xs">{new Date(goal.target_date).toLocaleDateString()}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Analysis Metadata */}
              <div className="bg-purple-50 rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-3 flex items-center gap-2">
                  <Bot className="w-5 h-5 text-purple-600" />
                  Analysis Details
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Analysis Type:</span>
                    <Badge className={`ml-2 text-xs ${getAnalysisTypeColor(analysis.analysis_type)}`}>
                      {getAnalysisTypeLabel(analysis.analysis_type)}
                    </Badge>
                  </div>
                  
                  <div>
                    <span className="text-gray-600">Model Used:</span>
                    <span className="ml-2 font-medium">{analysis.ai_config?.model_name || 'Unknown'}</span>
                  </div>
                  
                  <div>
                    <span className="text-gray-600">Analysis Date:</span>
                    <span className="ml-2 text-xs">{new Date(analysis.created_at).toLocaleString()}</span>
                  </div>
                  
                  {analysis.tokens_used && (
                    <div>
                      <span className="text-gray-600">Tokens Used:</span>
                      <span className="ml-2 font-mono text-xs">{analysis.tokens_used.toLocaleString()}</span>
                    </div>
                  )}
                  
                  {analysis.processing_time_ms && (
                    <div>
                      <span className="text-gray-600">Processing Time:</span>
                      <span className="ml-2 font-mono text-xs">{(analysis.processing_time_ms / 1000).toFixed(2)}s</span>
                    </div>
                  )}
                  
                  <div>
                    <span className="text-gray-600">Configuration:</span>
                    <span className="ml-2 text-xs">{analysis.ai_config?.name || 'Default'}</span>
                  </div>
                </div>
              </div>

              <Separator />

              {/* AI Analysis Results */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-lg flex items-center gap-2">
                    <FileText className="w-5 h-5 text-green-600" />
                    AI Analysis Results
                  </h3>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCopy}
                    >
                      <Copy className="w-4 h-4 mr-2" />
                      {copied ? 'Copied!' : 'Copy'}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleDownload}
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>
                
                <div className="bg-white border rounded-lg p-6">
                  <Markdown 
                    content={analysis.analysis_result} 
                    variant="analysis"
                    className="text-sm"
                  />
                </div>
              </div>
            </div>
        </div>

        <div className="flex-shrink-0 flex justify-end pt-4 border-t">
          <Button onClick={onClose} variant="outline">
            Close
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}